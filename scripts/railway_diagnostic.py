#!/usr/bin/env python3
"""
Script de diagn√≥stico espec√≠fico para Railway
"""

import os
import sys
import time
import json
import subprocess
from pathlib import Path

def check_railway_config():
    """Verifica la configuraci√≥n espec√≠fica de Railway."""
    print("üîç Verificando configuraci√≥n de Railway...")
    print("=" * 50)
    
    # Verificar railway.toml
    if os.path.exists("railway.toml"):
        print("‚úÖ railway.toml encontrado")
        try:
            with open("railway.toml", "r") as f:
                content = f.read()
                
            if "healthcheckPath = \"/\"" in content:
                print("‚úÖ healthcheckPath configurado como '/'")
            else:
                print("‚ùå healthcheckPath no configurado como '/'")
                
            if "port = 8000" in content:
                print("‚úÖ Puerto 8000 configurado")
            else:
                print("‚ùå Puerto 8000 no configurado")
                
        except Exception as e:
            print(f"‚ùå Error leyendo railway.toml: {e}")
    else:
        print("‚ùå railway.toml no encontrado")
    
    print()

def check_endpoints_order():
    """Verifica el orden de los endpoints en main_secure.py."""
    print("üîç Verificando orden de endpoints en main_secure.py...")
    
    if os.path.exists("src/backend/main_secure.py"):
        try:
            with open("src/backend/main_secure.py", "r") as f:
                content = f.read()
                
            # Buscar el orden de los endpoints
            lines = content.split('\n')
            endpoint_order = []
            
            for i, line in enumerate(lines):
                if '@app.get(' in line:
                    endpoint = line.strip()
                    endpoint_order.append((i+1, endpoint))
            
            print("üìã Orden de endpoints encontrados:")
            for line_num, endpoint in endpoint_order[:10]:  # Mostrar solo los primeros 10
                print(f"   L√≠nea {line_num}: {endpoint}")
            
            # Verificar que el endpoint ra√≠z est√© primero
            if endpoint_order and '"/"' in endpoint_order[0][1]:
                print("‚úÖ Endpoint ra√≠z '/' est√° definido primero")
            else:
                print("‚ùå Endpoint ra√≠z '/' no est√° definido primero")
                
        except Exception as e:
            print(f"‚ùå Error leyendo main_secure.py: {e}")
    else:
        print("‚ùå main_secure.py no encontrado")
    
    print()

def check_middleware_order():
    """Verifica el orden de los middleware."""
    print("üîç Verificando orden de middleware...")
    
    if os.path.exists("src/backend/main_secure.py"):
        try:
            with open("src/backend/main_secure.py", "r") as f:
                content = f.read()
                
            # Buscar middleware
            if "@app.middleware" in content:
                print("‚úÖ Middleware de logging encontrado")
            else:
                print("‚ùå Middleware de logging no encontrado")
                
            if "TrustedHostMiddleware" in content:
                print("‚úÖ TrustedHostMiddleware encontrado")
            else:
                print("‚ùå TrustedHostMiddleware no encontrado")
                
            if "CORSMiddleware" in content:
                print("‚úÖ CORSMiddleware encontrado")
            else:
                print("‚ùå CORSMiddleware no encontrado")
                
            if "SecurityMiddleware" in content:
                print("‚úÖ SecurityMiddleware encontrado")
            else:
                print("‚ùå SecurityMiddleware no encontrado")
                
        except Exception as e:
            print(f"‚ùå Error verificando middleware: {e}")
    else:
        print("‚ùå main_secure.py no encontrado")
    
    print()

def check_startup_sequence():
    """Verifica la secuencia de inicio."""
    print("üîç Verificando secuencia de inicio...")
    
    if os.path.exists("start.sh"):
        try:
            with open("start.sh", "r") as f:
                content = f.read()
                
            if "uvicorn main_secure:app" in content:
                print("‚úÖ Uvicorn configurado correctamente")
            else:
                print("‚ùå Uvicorn no configurado correctamente")
                
            if "--host 0.0.0.0" in content:
                print("‚úÖ Host 0.0.0.0 configurado")
            else:
                print("‚ùå Host 0.0.0.0 no configurado")
                
            if "--port 8000" in content:
                print("‚úÖ Puerto 8000 configurado")
            else:
                print("‚ùå Puerto 8000 no configurado")
                
        except Exception as e:
            print(f"‚ùå Error verificando start.sh: {e}")
    else:
        print("‚ùå start.sh no encontrado")
    
    print()

def check_dockerfile():
    """Verifica la configuraci√≥n del Dockerfile."""
    print("üîç Verificando Dockerfile...")
    
    if os.path.exists("Dockerfile"):
        try:
            with open("Dockerfile", "r") as f:
                content = f.read()
                
            if "EXPOSE" in content and "8000" in content:
                print("‚úÖ Puerto 8000 expuesto en Dockerfile")
            else:
                print("‚ùå Puerto 8000 no expuesto en Dockerfile")
                
            if "CMD [\"/app/start.sh\"]" in content:
                print("‚úÖ Comando de inicio configurado")
            else:
                print("‚ùå Comando de inicio no configurado")
                
            if "HEALTHCHECK" in content and "curl -f http://localhost:8000/" in content:
                print("‚úÖ Healthcheck configurado para endpoint ra√≠z")
            else:
                print("‚ùå Healthcheck no configurado para endpoint ra√≠z")
                
        except Exception as e:
            print(f"‚ùå Error verificando Dockerfile: {e}")
    else:
        print("‚ùå Dockerfile no encontrado")
    
    print()

def generate_railway_recommendations():
    """Genera recomendaciones espec√≠ficas para Railway."""
    print("üí° Recomendaciones para Railway...")
    print("=" * 50)
    
    recommendations = [
        "1. Verificar que el endpoint ra√≠z '/' est√© definido ANTES de cualquier middleware",
        "2. Asegurar que uvicorn est√© configurado con --host 0.0.0.0 --port 8000",
        "3. Verificar que el healthcheckPath en railway.toml sea '/'",
        "4. Confirmar que el Dockerfile exponga el puerto 8000",
        "5. Verificar que no haya dependencias externas en el endpoint de healthcheck",
        "6. Asegurar que el servicio est√© completamente inicializado antes del healthcheck",
        "7. Considerar aumentar el start-period en el healthcheck",
        "8. Verificar logs de Railway para errores espec√≠ficos"
    ]
    
    for rec in recommendations:
        print(f"   {rec}")
    
    print()

def main():
    """Funci√≥n principal."""
    print("üöÇ Diagn√≥stico Espec√≠fico para Railway")
    print("=" * 50)
    
    check_railway_config()
    check_endpoints_order()
    check_middleware_order()
    check_startup_sequence()
    check_dockerfile()
    generate_railway_recommendations()
    
    print("üéØ Diagn√≥stico completado")
    print("üìã Revisa las recomendaciones arriba para solucionar el problema")

if __name__ == "__main__":
    main() 